<?php 

编程语言
	人与人之间交流用的语言有汉语，英语，法语。。。
	人与计算机交流用的语言就是编程语言，如，C,PHP,JAVA。。

	学习一门英语，我们要学习，词汇，语法，等等。
	学习一门编程语言，我们也要学习，语法，指令。
	而无论是英文，法语，还是编程语言，它们都要有特定的规则(协议)，规定什么代表什么意思，如何去组成一条语句，我们必须遵守这些特定的规则，才能编写出有效的代码，让计算机去识别，我们下达的指令。

一、PHP是什么？
	PHP(Hypertext Preprocessor缩写)超级文本预处理器。
	PHP是一种在服务器端执行的嵌入HTML文档的脚本语言。
	PHP是目前最流行的网站开发语言（ B/S结构）。
	PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创新的语法 。
	支持几乎所有流行的数据库以及操作系统 

二、PHP的诞生：
	1.PHP，超文本预处理语言 PHP:Hypertext Preprocessor的缩写。

	2.94年由Rasmus Lerdorf创建。

	3.目的：为了要维护个人网页而制作的一个简单的用Perl语言编写的程序。
	这些工具程序用来显示 Rasmus Lerdorf 的个人履历，以及统计网页流量。

	4.后来又用C语言重新编写，包括可以访问数据库。
	他将这些程序和一些表单直译器整合起来，
	称为 PHP/FI。
	PHP/FI 可以和数据库连接，产生简单的动态网页程序。

	5.在1995年以Personal Home Page Tools (PHP Tools) 开始对外发表第一个版本。
	PHP 1.0 并写了一个介绍此程序的文档。
	在这的版本中，提供了访客留言本、访客计数器等简单的功能。
	以后越来越多的网站使用了PHP，并且强烈要求增加一些特性。

	6.1995年6月8日将 PHP/FI 公开发布,
	这个发布的版本命名为 PHP 2，
	希望可以透过社群来加速程序开发与寻找错误。
	96年，，有15000个网站使用 PHP/FI。
	
	7.在1997年，两个以色列程序设计师：
	Zeev Suraski 和 Andi Gutmans，
	重写了 PHP 的剖析器，成为 PHP3 的基础。
	而 PHP 也在这个时候
	改称为PHP：Hypertext Preprocessor。

	经过几个月测试，开发团队在1997年11月发布了 
	PHP/FI 2。随后就开始 PHP3 的开放测试，最后在1998年6月正式发布 PHP 3。

	8.Zeev Suraski 和 Andi Gutmans 在 PHP 3 发布后开始改写 PHP PHP 的核心，这个在1999年发布的剖析器称为 Zend Engine 。
	他们也在以色列的 Ramat Gan 成立了 Zend Technologies 来管理 PHP 的开发。
	
	9.公司成立后。在2000年5月22日，以Zend Engine 1.0为基础的PHP 4正式发布。

	10.2004年7月13日则发布了PHP 5，PHP 5则使用了第二代的Zend Engine[5]。
	PHP包含了许多新特色，像是强化的面向对象功能、引入PDO（PHP Data Objects，一个存取数据库的延伸函数库）、以及许多效能上的增强。
	PHP4 已经不会继续更新，以鼓励用户转移到PHP 5。
	PHP6 是一个夭折产品，没有正式发布过。
	php5.3 后与前，有差别。如数组的定义方式  array()  []

三、PHP在web中的功能(PHP能做什么)?
	1.收集表单数据
	2.能够生成动态页面内容
	3.符串处理
	4.动态输出图像
	5.服务端文件系统操作，即能够创建、打开、读取、写入、删除以及关闭服务器上的文件
	6.能够添加、删除、修改数据库中的数据
	7.能够限制用户访问网站中的某些页面
	8.能够对数据进行加密
	9.会话跟踪
	10.支持利用大量的网络协议
	服务端的其他相关操作，省略。。。

四、为什么要使用PHP? PHP的特点：
	2.PHP 是一种 HTML 内嵌式的语言，是一种在服务器端执行的嵌入HTML文档的脚本语言(解释型语言)，语言的风格有类似于C语言。
	3.PHP可以用C、C++进行程序的扩展
	4.PHP本身免费且是开源代码。
	5.php的快捷性 程序开发快，运行快，技术本身学习快。
	6.编辑简单，实用性强，更适合初学者。
	7.跨平台性强 由于PHP是运行在服务器端的脚本，可以运行在UNIX、LINUX、WINDOWS、Mac OS下。
	8.效率高 PHP消耗相当少的 系统资源。
	9.几乎支持所有主流与非主流数据库。
	10.HTML运行在客户端，PHP运行在服务端。
	11.PHP是B/S结构的应用程序

五、编译型语言与解释型语言：
	计算机是不能理解高级语言，当然也就不能直接执行高级语言了。计算机只能直接理解机器语言，所以任何语言，都必须将其翻译成机器语言，计算机才能运行高级语言编写的程序。

	解释性语言：
     	解释性语言的程序不需要编译，在运行程序的时候才翻译，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。
     	现代解释性语言通常把源程序编译成中间代码，然后用解释器把中间代码一条条翻译成目标机器代码，一条条执行。
    脚本语言（Script language）：
    	是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。脚本语言一般都有相应的脚本引擎来解释执行。 他们一般需要解释器才能运行。一个脚本通常是解释运行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。
    	PHP是一门脚本语言，也属于解释性
    	脚本语言一般都是以文本形式存在,类似于一种命令

     编译型语言 ：
		编译型语言在程序执行之前，有一个单独的编译过程，将程序翻译成机器语言，以后执行这个程序的时候，就不用再进行翻译了。


检测环境
	
---------------------------------------------------------------------------------
PHP基本语法
1.开发步骤：
	1.显示后缀
	2.创建文本文件
	3.文件必须以英文数字下划线组成(php不认识中文)
	4.后缀为php
	5.通过浏览器访问WEB服务器执行程序

2.基本语法：
	1.PHP语言标记特性

	2.1 我们用 <?php 来表示PHP标识符的起始，进入php模式，然后写入PHP语句并通过加上一个终 止标识符 ?> 退出php模式
	2.2 <?php 请顶头写  namespace me;
    2.3 语句分隔符：每条语句，都要以分号结尾，否则，语法错误！
    	每一门语言都有自己的语法规范，编写者都必须遵守语法规范，否则，PHP直接报错(罢工)，因为PHP每次在执行时，都会进行语法扫描，如果有致命错误，则不执行。

    2.4 phpinfo(); php探针，查看php的环境配置。接触新环境，第一个就运行的函数。

    2.5 一段PHP代码中的结束标记?>隐含表示了一个分号，所以在一个PHP代码段中的最后一行可以不用分号结束。推荐加分号。

    2.6 如果整个文件都是php, 最后的'?>'结束符号可以省略(推荐)
    如果PHP可以生成图像，整个PHP就是图像，
    而这个图像如果被包含，会影响输出。

	2.7 每次编辑后请刷新浏览器

	2.8 PHP需要在每个指令后用分号结束

3.嵌入到HTML
	1. 用<?php开始嵌入html里面，进入php模式，遇到?>退出php模式
	代码中嵌入了php，则文件后缀必须使用.php

	2.可以将PHP嵌入到HTML中的任何位置，而且还可以嵌入HTML标签属性里。
	3.页面中可以有多处<?php ?> 所有的php作为一个整体执行，不是每个区块单独执行

4.PHP标记四大风格：
	1. 标准风格 <?php 这里是代码 ?> 推荐使用
	2. asp风格
	<%  %> ASP风格的标记，移植性差,默认禁用的。在php.ini asp_tags 开启。   
	3. 短风格
	<?  ?>简短风格的标记，会干扰XML文档声明，在php.ini short_open_tag 开启
	4. 长风格
	<script language="php"> </script>长标记风格，默认情况下总是可用的。 但是不能嵌入 HTML属性位置

5.程序的注释：
	作用
	使其他人理解您正在做的工作 - 注释可以让其他程序员了解您在每个步骤进行的工作（如果您供职于团队）

	提醒自己做过什么 - 大多数程序员都曾经历过一两年后对项目进行返工，然后不得不重新考虑他们做过的事情。注释可以记录您在写代码时的思路。

	对于阅读代码的人来说，注释其实就相当于代码的解释和说明。注释可以用来解释脚本的用途、脚本编写人、为什么要按如
	此的方法编写代码、上一次修改的时间等等。
	还可以提高代码可读性

	方式
	1.单行注释(脚本注释)
		# 使用井号开头的是单行注释
	2.单行注释
		// 使用双斜线的也是单行注释，从出现位置，注释到行尾。推荐
	3.多行注释
		/*
			这个是多行注释，不能自插，你懂的
		*/
	4.文档注释
		通过其他产生成帮助文档
	/**
	  *
	  */

6.在程序中使用空白符的处理
	1.注意事项
	1.1 一般来说，空白符（空格、Tab制表符、换行）在PHP中无关紧要。可以将一个语句展开成任意行，或者将语句紧缩在一行。
    1.2 可以利用这个灵活的格式来使代码更具有可读性（通过排列分配、缩进等）。一些懒惰的程序员利用这种自由的格式创建根本
    1.3 无法阅读的代码，这是不提倡的。

	2. PSR-1 基本代码规范  
	（FIG 制定的PHP规范，简称PSR，是PHP开发的事实标准。）
	使用两个空行
		一个源文件的两个代码段
		两个类的声明
 	在以下情况使用一个空行
		两个函数声明之间
		函数内的局部变量和函数的第一条语句之间
		注释或者单行注释之前
		一个函数的两个逻辑代码段
	代码缩进
		代码必须 使用4个空格来进行缩进，禁止使用tabs
	代码结尾
		所有的PHP文件必须使用Unix的LF(换行符)作为行结尾
		所有的PHP文件必须是以单一的空白行结尾
		在纯PHP文件中必须省略文件结尾的?>标记



PHP变量：
	7.1 变量的声明
	7.2 变量的命名
	7.3 可变变量
	7.4 变量的引用赋值
	
	1.变量的定义:
		变量是存储信息的容器。
		就像我们以前做数学题，x=5,y=10,z=x+y   作为数值的临时表式。
		到程序的世界里, x y z就是变量
		变量可以存储数字、文本、或者复杂得多的排列组合。以及跟踪该信息的类型！
	2.PHP变量特性(松散类型、弱类型)：		    	
		PHP是一种非常弱的类型语言。
		在大多数编程语言中，变量只能保持一种类型的数据，
		而且这个类型必须在使用变量前声明，
		例如C语言中。而在PHP中，变量的类型通常不是由程序员设定的，
		确切地说，是根据该变量使用的上下文在运行时（即变量的值）决定的。	
		PHP不要求在使用变量之前声明变量，当第一次给一个变量赋值时，你才创建了这个变量。
		会根据值自动创建相应的类型。
		比如一间房子(容器)，我把狗放进去就是狗窝，鸡放进去就是鸡窝！

	3.定义变量
	  	PHP的变量声明是以$符开始的，
	  	后面跟大小写字母，数字和下划线，但不能以数字开头。
	  	可以使用函数unset( )释放指定的变量，isset( )函数检测变量是否设置，empty( )函数检查一个变量是否为空。

	 4.可变变量
	 5.变量的引用赋值

	8.1  类型介绍
		1.PHP 支持八种原始类型。 
			四种标量类型： 
				布尔型（boolean） 
				整型（integer）
				浮点型（float）（浮点数，也作double） 
				字符串（String） 
			两种复合类型： 
				数组（Array） 
				对象Object） 
			最后是两种特殊类型： 
				资源（Resource）
				空  NULL
		2.在PHP中，变量的类型通常不是由程序员设定的，确切地说，是根据该变量使用的上下文在运行时（即变量的值）决定的。

    	3.使用函数var_dump( )查看表达式的值和类型
 
	8.2  布尔型(boolean)
		1.这是最简单的类型。boolean 表达了真值，可以为 TRUE 或 FALSE，即“真”或“假”。
		2.当其他类型转换为 boolean类型 时，以下值被认为是FALSE：
			布尔值 FALSE
			整型值 0（零）
			浮点型值 0.0（零）
			空白字符串和字符串"0"
			没有成员变量的数组
			没有单元的对象（仅适用于 PHP 4）
			特殊类型 NULL（包括尚未设定的变量）
			所有其它值都被认为是 TRUE（包括任何资源）
		2.1 空 零 假 都会返回 false
			$test = (bool) '';
			$test = (bool) null;

			$test = (bool) 0;
			$test = (bool) 0.0;
			$test = (bool) '0';

			$test = (bool) false;
			$test = (bool) 'false';
		3.特点
		echo 布尔值  true会输出1， false输出空字符串
		empty判断布尔值变量， true会返回false ， false返回true
		
	8.3  整型(integer)
		1.整型值可以用十进制，十六进制或八进制符号指定，前面可以加上可选的符号（- 或者 +）代表数值的正负。
       	2.整数值有最大的使用范围，这与平台有关，对于32位系统而言范围：-2147483648～2147483647,PHP不支持无符号整数。
		3.如果超出了则变成了float型。
	8.4  浮点型(float或double)
		1.浮点数（也叫双精度数或实数）是包含小数部分的数。通常用来表示整数无法表示的数据，如金钱值、距离值、速度值等。
		    浮点数的字长和平台相关，尽管通常最大值是 1.8e308 并具有 14 位十进制数字的精度。
		2.可以用科学计数法表示
			$a = 1.234;
			$a = 1.2e3;
		3.取整的函数  round()   floor() 	ceil()
		4.浮点数的精度问题

	8.5  字符串(String)
		① string是一系列字符。
		② 一个字符串变得非常巨大也没有问题，PHP 没有给字符串的大小强加实现范围，所以完全没有理由担心长字符串。
		③ 字符串的4种定义方式
 			 单引号
			 	1.单引号、双引号、定界符都可以声明字符串。
			 	2.单引号不能解析变量和转义字符 \ (解析效	率高)
			 	3.单引号中不能在包含单引号。（如果有，请使用转义字符）
			 	4.转义字符在单引号中只能解析单引号，和转义字符本身。
			 双引号
			 	5.双引号可以解析变量和转义字符。
			 	6.双引号中不能在包含双引号。（如果有，请使用转义字符）
			 	7.单引号中可以包含双引号，双引号中可以包含单引号。
			 	8.转义字符在双引号中有更多的意义。（\n \r \t 等）
			 	9.双引号可以解析包含在单引号中的变量，单引号也将被保留。
			 	10.链接一个字符串和变量,或者链接两个变量使用符号"."
			定界符： 
			heredoc 语法结构  
			nowdoc 语法结构 (自PHP 5.3.0以后) 

---------------------------------------------------------------------------
	8.6  数组(Array)

		1.PHP 中的数组实际上是一个有序图。图是一种把 values 映射到 keys 的类型。此类型在很多方面做了优化，
		因此可以把它当成真正的数组来使用，或列表（矢量），散列表（是图的一种实现），字典，集合，栈，队列以及更多可能性。
			  因为可以用另一个 PHP 数组作为值，也可以很容易地模拟树。
		2.PHP中可以使用多种方式构建一个数组，
	8.7  对象(Object)
		1.在PHP中，对象和数组一样都是一种复合数据类型。但对象是一种更高级的数据类型。一个对象类型的变量，
		    是由一组属性值和一组方法构成，其中属性表明对象的一种状态，方法通常用来表明对象的功能。
	8.8  资源类型(Resource)
		1.资源是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。
		2.由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此无法将其它类型的值转换为资源
		3.PHP4Zend引擎引进了资源计数系统，可以自动检测到一个资源不再被引用了（和 Java 一样）。
		     这种情况下此资源使用的所有外部资源都会被垃圾回收系统释放。
	8.9  NULL类型
		1.特殊的 NULL 值表示一个变量没有值。NULL类型唯一可能的值就是NULL，表示一个变量的值为空，NULL不区分大小写。
		2.在下列情况下一个变量被认为是 NULL： 
			被赋值为 NULL值的变量。 
			尚未被赋值的变量。 
			被unset()函数销毁的变量。
	8.10 伪类型介绍
		1.伪类型并不是PHP语言中的基本数据类型，只是因为PHP是弱类型语言，所以在一些函数中，一个参数可以接收多种类型的数据，
		      还可以接收别的函数作为回调函数使用。
		2.伪类型
			mixed：说明一个参数可以接受多种不同的（但并不必须是所有的）类型。 
			number：说明一个参数可以是 integer 或者 float。
			callback：有些诸如 call_user_function() 或 usort() 的函数接受用户自定义的函数作为一个参数。
			Callback 函数不仅可以是一个简单的函数，它还可以是一个对象的方法，包括静态类的方法
			一个 PHP 函数用函数名字符串来传递。可以传递任何内置的或者用户自定义的函数，除了 
				array()，echo()，empty()，eval()，exit()，isset()，list()，print() 和 unset()。
	
	9. 数据类型之间的互相转换
		1.PHP 在变量定义中不需要（或不支持）明示的类型定义；变量类型是根据使用该变量的上下文所决定的。
		2.类型转换是指将变量或值从一种数据类型转换成其他数据类型。转换的方法有两种：
			自动转换
			强制转换

	9.2 强制类型转换
		PHP 中的类型强制转换和 C 中的非常像：在要转换的变量之前加上用括号括起来的目标类型
			(int)，(integer) - 转换成整型
			(bool)，(boolean) - 转换成布尔型
			(float)，(double)，(real) - 转换成浮点型
			(string) - 转换成字符串
			(array) - 转换成数组
			(object) - 转换成对象
			注： 注意在括号内允许有空格和制表符，为了将一个变量还原为字符串，还可以将变量放置在双引号中。 

	9.3 变量类型的测试函数：
		is_bool():判断是否是布尔型
		is_int()、is_integer()和is_long():判断是否为整型。
		is_float()、is_double()和is_real()：判断是否为浮点型
		is_string()：判断是否为字符串
		is_array()：判断是否为数组
		is_object()：判断是否为对象
		is_resource()：判断是否为资源类型
		is_null()：判断是否为null
		is_scalar()：判断是否为标量
		is_numeric()：判断是否是任何类型的数字和数字字符串
		is_callable()：判断是否是有效的函数名
		函数：bool settype ( mixed var, string type )是将变量 var 的类型设置成 type。 

10. 常量
	10.1 常量的定义与使用
	10.2 常量与变量
	10.3 预定义常量
	
	1.常量是一个简单值的标识符（名字）。如同其名称所暗示的，在脚本执行期间一个常量一旦被定义，就不能再改变或取消定义。常量默认为大小写敏感。按照惯例常量标识符总是大写的。
	2.常量名和其它任何 PHP 标签遵循同样的命名规则。合法的常量名以字母或下划线开始，后面跟着任何字母，数字或下划线。
	3.常量的范围是全局的。不用管作用域就可以在脚本的任何地方访问常量。
	4.我们可以用 define() 函数来定义常量。

	1.常量一旦定义，就不能改变或者销毁。
	2.常量大小写敏感。推荐大写。
	3.命名规则如变量的命名规则。
		合法的常量名以字母或下划线开始，后面跟着任何字母，数字或下划线。
	4.常量是全局的。
	5.使用define() 或 const 定义常量。

10.2 常量与变量
	1.常量和变量不同： 
		常量前面没有美元符号（$）； 
		常量只能用 define() 函数定义，而不能通过赋值语句； 
		常量可以不用理会变量范围的规则而在任何地方定义和访问； 
		常量一旦定义就不能被重新定义或者取消定义； 
		常量的值只能是标量。
	2.可以用函数 constant() 来读取常量的值。
	3.用 get_defined_constants() 可以获得所有已定义的常量列表 

10.3 预定义常量
	1.魔术常量
		__LINE__
		__FILE__
		__FUNCTION__
		__CLASS__
		__METHOD__
	2.系统常量
		PHP_OS: 执行PHP解析的操作系统名称
        PHP_VERSION: 当前PHP服务器的版本。


11. PHP的运算符
	11.1 什么是运算符
		1.定义
		运算符是可以通过给出的一或多个值（用编程行话来说，表达式）来产生另一个值（因而整个结构成为一个表达式）的东西。所以可以认为函数或任何会返回一个值（例如 print）的结构是运算符，而那些没有返回值的（例如 echo）是别的东西。

		2.有三种类型的运算符：
			一元运算符：  只运算一个值，例如 !（取反运算符）或 ++（加一运算符）。
			二元运算符：  有两个操作数，PHP支持的大多数运算符都是这种。
			三元运算符：  ? :。它应该被用来根据一个表达式在另两个表达式中选择一个，而不是用来在两个语句或者程序路线中选择。把整个三元表达式放在扩号里是个很好的主意。
11.2 算数运算符
	+     	加法运算
	-		减法/去负 运算
	*       乘法运算
	/       除法运算
	%       取余运算（取模运算）
	++      累加
	--      累减

11.3 字符串运算符
	.       字符串连接符

11.4 赋值运算符
	=		将一个值或表达式的结果赋给变量
	+=		将变量与所赋的值相加后的结果赋给该变量
	-=		将变量与所赋的值相减后的结果赋给该变量
	*=		将变量与所赋的值相乘后的结果赋给该变量
	/=		将变量与所赋的值相除后的结果赋给该变量
	%=		将变量与所赋的值求模后的结果赋给该变量
	.=		将变量与所赋的值相连后的结果赋给该变量

11.5 比较运算符
	>			大于		当左边大于右边时返回true，否则返回false
	<	        小于		当左边小于右边时返回true，否则返回false
	>=	     	大于等于	当左边大于等于右边时返回true，否则false
	<=	     	小于等于	当左边小于等于右边时返回true，否则false
	==	     	等于		两边操作数的值相等时返回true，否则false
	===	     	全等于		两边值相等并且类型相等返回true，否则false
	<>或!=	 	不等于		两边值不等时返回true，否则返回false
	!==	     	非全等于	两边值与类型都相同时返回false，否则true

11.6 逻辑运算符
	and或&&		逻辑与		当两边操作数都为true时，返回true，否则返回false
	or或||		逻辑或		当两边操作数都为false时，返回false，否则返回true
	not或！		逻辑非		当操作数为true时返回false，否则返回true
	xor			逻辑异或	当两边操作数只有一个为true时，返回true，否则返回false

11.7 位运算符
	&		按位与		只有参与运算的两位都为1时，运算结果才为1，否则为0.
	|		按位或		只有参与运算的两位都为0时，运算结果才为0，否则为1.
	^		按位异或	只有参与运算的两位不同，运算结果才为1，否则为0.
	～		按位非		将用二进制表示的操作数中的1变成0，0变成1.
	<<		左移		将左边的操作数在内存中的二进制数据右移右边操作数指定的位数，右边移空的部分补上0
	>>		右移		将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，左边移空的部分补上0

11.8 其他运算符
	? :		三元运算符，可以提供简单的逻辑判断。
	``		反引号(` `)是执行运算符，PHP将尝试将反引号中的内容作外壳命令来执行，并将其输入信息返回
	@		错误控制运算符，当将其放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉。
	=>		数组下标指定符号，通过此符号指定数组的键与值。
	->		对象成员访问符号，访问对象中的成员属性或成员方法。
	instanceof	类型运算符，用来测定一个给定的对象是否来自指定的对象类。

11.9 运算符的优先级
	见图
	可以用()来控制优先顺序

11.10 表达式

	1.表达式是 PHP 最重要的基石。在 PHP 中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是“任何有值的东西”。
	2.最基本的表达式形式是常量和变量。当键入“$a = 5”。
	3.稍微复杂的表达式例子就是函数。 
	4.其他还有运算符与操作数构成的也成表达式。如：比较表达式$a>5、$a==5。 

	
3.1 可变变量
	即：一个可变变量获取了一个普通变量的值作为这个可变变量的变量名
		$a = 'hello';		//普通变量
		$$a = ‘world’;		//可变变量	
		echo "$a ${$a}";	//输出：hello world
		echo "$a $hello";	//输出：hello world

3.2 变量的引用赋值
	1.引用操作符&可以在关联赋值中使用，就像一个别名，使得变量都指向了内存的相同地址。
		$a=5;
		$b=&$a;
		echo $b;	//输出5
		$a=7;
		echo $b;	//输出7
	
	2.通过unset($a)重置变量与内存的关联
