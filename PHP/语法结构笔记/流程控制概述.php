<?php 

1.流程控制概述

	1.任何 PHP 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。本章讲述了各种语句类型。
	2.在任何一门程序设计语言中，都需要支持满足程序结构化所需要的三种基本结构:
		顺序结构
		分支结构（选择结构）
		循环结构

	3.顺序结构：在程序结构中，最基本的就是顺序结构。程序会按照自上而下的顺序执行。由于结构简单所以这里我就不多介绍

2.分支结构
	1.1  单一条件分支结构(if)
		if(条件表达式){
		   语句组; 
		   //语句组为单条语句时可省略“{ }”。
	   }

	1.2  双向条件分支结构(else从句)
		if(条件表达式){
			语句组1
		}else{	
			语句组2	
			//语句组为单条语句时可省略“{ }”。
		}

	1.3  多向条件分支结构(elseif子句)
		if(条件表达式1){
			语句块1
		}elseif(条件表达式1){	
			语句块2	
		... ...		
		}elseif(条件表达式n){
		     语句块n
	     }else{
			语句块n+1
	     }

	1.4  多向条件分支结构(switch语句)
		switch（表达式）{
			case  值1：
			     语句序列1；	     break；	
			case  值2：
			     语句序列2；	     break；
			default：
			     语句序列 n；	     break；
		 }

		1.当程序执行碰到switch条件判断时，它会取出键值，然后与语句体中的case所列出的值逐一比较，如果数值不符合，则将数值往下一个case传递，如果数值符合，则执行case中的语句，然后再碰到break语句即跳出switch条件判断，如果所有的值比对都不符合，则会执行default中的语句 。

		switch语句使用注意事项:
		1.switch语句与if语句不同，它仅能判断一种关系：是否恒等。 
		2.switch语句中case子句的常量可以是整型常量、字符型常量、表达式或变量。
		3.在同一个switch中，case子句的常量不能相同，否则第二个值永远无法匹配到。
		4.case 和 default 子句后面的语句序列允许由多个可执行语句组成，且不必用“｛ ｝”括起来，也可以为空语句。
		5.switch语句中可省略break语句和default子句。但省略后会改变流程。   


	1.5  巢状条件分支结构
		if(表达式1){
		   if(表达式2){
			   .. .. ..
			 }else{
		     .. .. ..
			 }
		}else{
		   if(表达式3){   …
			 }
		}

2.循环结构:
	2.1  while语句
		 while(表达式){
			语句或语句序列
			... ...
		}

		当while循环语句中表达式（循环控制语句）的结果为真时，程序将反复执行同一段程序：循环体（ while中的语句或语句序列），直到满足一定的条件（表达式的结果为假时）后才停止执行该段程序。

	2.2  do...while循环
		do{
			语句或语句序列
			... ...
	   	}while(表达式)；

	   	程序会先执行 do 语句体中的语句（循环体），然后再检查表达式（循环控制语句）的值，如果符合条件式（值为真），就再进行 do 语句体中的语句，直到条件不符合为

	注意：
		do-while 后面必须加上分号作为结束
		do-while与while的最大区别是先执行循环体然后再判断循环的控制条件

	2.3  for语句
		for(表达式1;表达式2;表达式3)
		{
			语句或语句序列;
		 }
		for循环语句中表达式1为循环初始条件；表达式2为循环控制条件；表达式3为控制变量递增；语句或语句序列为循环体。

	2.4  特殊的流程控制语句

		1. break 
			我们之前在 switch 条件判断中已经使用过 break 关键字，它会使得程序流程离开 switch 本体中的语句，如果 break 使用在 for、while 或 do-while 循环结构中时，将会使得程序离开该层循环。
		2. continue
			continue 的作用与 break 有点类似，continue 若使用在 for、while 或 do-while循环结构中，当程序执行至 continue 时，之后的语句将直接被略过，而直接执行下一次的循环动作。
		3. exit
		    当前的脚本中只要执行到exit语句，而不管它在哪个结构中都会直接退出当前脚本。exit是一个函数，当前使用过的die( )函数就是exit( )的别名。可以带参数输出一条消息，并退出当前脚本。 		

